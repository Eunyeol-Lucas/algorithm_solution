const filePath = process.platform === "linux" ? "/dev/stdin" : "input.txt";
let input = require("fs").readFileSync(filePath).toString().trim().split("\n");
const [N, M] = input.shift().split(" ").map(Number);

const graph = input.map((i) => [...i].map(Number));
console.log(solution(N, M, graph));

function solution(N, M, graph) {
  const directList = [
    [0, 1],
    [1, 0],
    [0, -1],
    [-1, 0],
  ];
  let breakChance = 1;
  const vst = Array.from({ length: N }, () => Array(M).fill(1e9));
  if (N === 1 && M === 1) {
    console.log(1);
    process.exit(0);
  }

  const q = [[0, 0]];
  vst[0][0] = 1;
  while (q.length) {
    const [x, y] = q.shift();
    if (vst[x][y] > vst[N - 1][M - 1]) continue;
    if (x === N - 1 && y === M - 1 && vst[x][y] !== 1e9) {
      return vst[x][y];
    }
    for (const [dx, dy] of directList) {
      const nx = x + dx,
        ny = y + dy;
      if (
        nx >= 0 &&
        nx < N &&
        ny >= 0 &&
        ny < M &&
        (!graph[nx][ny] || (breakChance && graph[nx][ny] === 1)) &&
        vst[nx][ny] > vst[x][y] + 1
      ) {
        vst[nx][ny] = vst[x][y] + 1;
        q.push([nx, ny]);
        if (graph[nx][ny]) {
          breakChance = 0;
        }
      }
    }
  }
  return -1;
}
